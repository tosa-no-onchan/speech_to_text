#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Sep 10, 2023 12:20:37 AM JST  platform: Linux

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import voice_checker
import voice_checker_api

_debug = False # False to eliminate debug printing from callback functions.

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)

    # add by nishi
    global api_exec
    api_exec = voice_checker_api.Voice_checker_api()

    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = voice_checker.Toplevel1(_top1)
    
    # add by nishi
    api_exec.start()
    
    root.mainloop()


def on_click_back(*args):
    if _debug:
        print('voice_checker_support.on_click_back')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_back()


def on_click_exit(*args):
    if _debug:
        print('voice_checker_support.on_click_exit')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.exit_req()

def on_click_ok(*args):
    if _debug:
        print('voice_checker_support.on_click_ok')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_ok()

def on_click_recovery(*args):
    if _debug:
        print('voice_checker_support.on_click_recovery')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
       api_exec.on_click_recovery() 

def on_click_remove(*args):
    if _debug:
        print('voice_checker_support.on_click_remove')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_remove()

def on_click_resume(*args):
    if _debug:
        print('voice_checker_support.on_click_resume')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_resume()

def on_click_sound(*args):
    if _debug:
        print('voice_checker_support.on_click_sound')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_sound()

def on_click_top(*args):
    if _debug:
        print('voice_checker_support.on_click_top')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_top()

def on_click_wav_to_mp3(*args):
    if _debug:
        print('voice_checker_support.on_click_wav_to_mp3')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_wav_to_mp3()

def on_click_wavsurfer(*args):
    if _debug:
        print('voice_checker_support.on_click_wavsurfer')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
    else:
        api_exec.on_click_wavsurfer()


if __name__ == '__main__':
    voice_checker.start_up()




